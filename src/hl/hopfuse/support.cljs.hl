(ns hopfuse.support
  (:require
   [hopfuse.bootstrap-support :refer [container control-label form-group form-horizontal]]))

(defc inspector-shown? false)

(defelem cell-inspector [attr kids]
         (div :class "panel panel-default"
              (div :class "panel-body"
                   (button :type "button" :class "btn btn-default btn-xs"
                           :click #(swap! inspector-shown? not)
                           (span :class (cell= {"glyphicon" true
                                                "glyphicon-chevron-up" inspector-shown?
                                                "glyphicon-chevron-down" (not inspector-shown?)})))
                   (ul :toggle inspector-shown?
                       (map li kids)))))

(defelem close-button [attr kids]
         ((button :type "button" :class "close"
                  (span "x")
                  (span :class "sr-only" "Close")) attr))

(def ^:private alert-class-default {:alert         true
                                    :alert-info    false
                                    :alert-success false
                                    :alert-warning false
                                    :alert-danger  false})

(defelem alert [{:keys [type] :as attr} kids]
         (let [class-cell (cell= (let [style (str "alert-" (name (or type :success)))]
                                   (assoc alert-class-default style true)))]
           ((div :class class-cell) (dissoc attr :type) kids)))

(defelem dismissible-alert [{:keys [type message close-cell] :as attr} _]
         ((alert :toggle (cell= (not (nil? type)))
                 :type type
                 (text "~{message}")
                 (close-button :click #(reset! close-cell nil)))
          (dissoc attr :type :message :close-cell)))

(defn assoc-handler [cell & key]
      (fn [event]
          (swap! cell assoc-in key @event)))


;; Modal dialog support
;; doesn't work properly though

(defelem modal [attr kids]
         (with-let [elem ((div :class "modal"
                               (div :class "modal-dialog"
                                    ((div :class "modal-content") kids))) attr)]
                   (with-init!
                     (.modal (js/jQuery elem) (clj->js {:show false :backdrop false}))))) ;; this doesn't work for some reason

(defelem modal-header [attr kids]
         ((div :class "modal-header") attr kids))

(defelem modal-body [attr kids]
         ((div :class "modal-body") attr kids))

(defelem modal-footer [attr kids]
         ((div :class "modal-footer") attr kids))

(defmethod do! :toggle-modal
  [elem _ v]
  (.modal (js/jQuery elem) (if v "show" "hide")))

(defn format-date-time [date-time]
  (when date-time
      (.format (goog.i18n.DateTimeFormat. "yyyy/MM/dd HH:mm:ss") date-time)))
