(page "index.html"
      (:require
       [tailrecursion.hoplon.reload :refer [reload-all]]
       [hoplon.twitter.bootstrap :refer [container control-label form-group form-horizontal tabs tab]]
       [hopfuse.rpc :as rpc]
       [hopfuse.support :as support]))

(reload-all)

(rpc/init)

(defc= logged-user-title
       (let [logged-user (:logged-user rpc/state)]
         (str (:name logged-user) " " (:last-name logged-user))))

(defc login-data {})

(html
  (head
    ;(link :href "css/bootstrap.css" :rel "stylesheet" :type "text/css")
    ;(script :src "js/bootstrap.min.js" :type "text/javascript" :language "javascript")
    )
  (body

    (container

      (support/cell-inspector
        (text "State cell: ~{rpc/state}")
        (text "Error cell: ~{(pr-str rpc/error)}")
        (text "Loading cell: ~{rpc/loading}"))

      (div :class "modal-dialog" :toggle rpc/loading-in-process?
           (div :class "modal-content"
                (div :class "modal-body" "Please wait ...")))

      (support/dismissible-alert :type (cell= (when rpc/error :danger))
                                 :message (cell= (:message rpc/error))
                                 :close-cell rpc/error)

      (div :id "logged-off-content" :toggle (cell= (not rpc/logged-in?))

           (form :role "form"
                 :submit #(let [login-data-value @login-data]
                           (rpc/login! (:username login-data-value) (:password login-data-value)))
                 (h2 "Please log in")
                 (input :id "inputUsername" :type "text" :class "form-control" :placeholder "Username" :autofocus true
                        :change (support/assoc-handler login-data :username))

                 (input :id "inputPassword" :type "password" :class "form-control" :placeholder "Password"
                        :change (support/assoc-handler login-data :password))

                 (div :class "checkbox"
                      (label
                        (input :type "checkbox" :value "remember-me")
                        "Remember me"))

                 (button :class "btn btn-lg btn-primary btn-block" :type "submit" "Log In"))
           )

      ;(div :id "logged-off-content" :class "panel panel-default" :toggle (cell= (not rpc/logged-in?))
      ;     (div :class "panel-body"
      ;          (form-horizontal
      ;            :submit #(rpc/login! (val-id "inputUsername") (val-id "inputPassword"))
      ;            (form-group
      ;              (control-label :col {:sm 2} :for "inputUsername" "Username")
      ;              (div :col {:sm 5}
      ;                   (input :type "text" :class "form-control" :id "inputUsername" :placeholder "Type here")))
      ;            (form-group
      ;              (control-label :col {:sm 2} :for "inputPassword" "Password")
      ;              (div :col {:sm 5}
      ;                   (input :type "password" :class "form-control" :id "inputPassword" :placeholder "Type here")))
      ;            (form-group
      ;              (div :col {:sm 5} :offset {:sm 2}
      ;                   (button :type "submit" :class "btn btn-default" "Sign In"))))))

      (div :id "logged-in-content" :toggle rpc/logged-in?

           (div :class "panel panel-default"
                (div :class "panel-body"
                     "You are logged in as " (strong (text "~{logged-user-title}"))
                     (button :type "button" :class "btn btn-lg btn-primary" :click #(rpc/logout!) "Log Out")))

           (div :class "panel panel-default"
                (div :class "panel-body"

                     (tabs
                       (tab :name "Users"
                            (table :class "table table-condensed"
                                   (thead
                                     (tr
                                       (th "Username")
                                       (th "Name")
                                       (th "Last Name")
                                       (th "Role")
                                       ))
                                   (tbody
                                     (loop-tpl :bindings [user (cell= (:users rpc/state))]
                                               (tr
                                                 (td (text (:username user)))
                                                 (td (text (:name user)))
                                                 (td (text (:last-name user)))
                                                 (td (text (str (when-let [role (:role user)]
                                                                  (name role))
                                                                (when (= :company (:role user))
                                                                  " (some company)"))))
                                                 (td "Some actions")
                                                 ))))
                            )
                       (tab :name "Companies"
                            (h4 "Companies")))

                     )))

      )))
